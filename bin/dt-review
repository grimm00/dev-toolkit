#!/usr/bin/env bash

# Dev Toolkit - Quick Sourcery Review Extractor
# Alias for dt-sourcery-parse with convenient output location

set -euo pipefail

# Detect DT_ROOT
if [ -n "${DT_ROOT:-}" ]; then
    TOOLKIT_ROOT="$DT_ROOT"
elif [ -f "$HOME/.dev-toolkit/bin/dt-sourcery-parse" ]; then
    TOOLKIT_ROOT="$HOME/.dev-toolkit"
else
    echo "❌ Error: Cannot locate dev-toolkit installation"
    echo "💡 Set DT_ROOT environment variable or install to ~/.dev-toolkit"
    exit 1
fi

# Handle help flags
if [[ "${1:-}" == "--help" ]] || [[ "${1:-}" == "-h" ]]; then
    echo "Usage: dt-review <PR_NUMBER>"
    echo ""
    echo "Extracts Sourcery review and saves to admin/feedback/sourcery/pr<NUMBER>.md"
    echo ""
    echo "This is a convenience wrapper for dt-sourcery-parse that:"
    echo "  - Automatically adds --rich-details flag"
    echo "  - Saves to admin/feedback/sourcery/pr<NUMBER>.md"
    echo "  - Formats PR number with leading zero (e.g., pr06.md)"
    echo "  - Detects and highlights Overall Comments when present"
    echo ""
    echo "Example:"
    echo "  dt-review 6"
    echo "  # Saves to admin/feedback/sourcery/pr06.md"
    echo ""
    echo "For more options, use dt-sourcery-parse directly:"
    echo "  dt-sourcery-parse --help"
    exit 0
fi

# Get PR number
PR_NUMBER="${1:-}"

if [ -z "$PR_NUMBER" ]; then
    echo "Usage: dt-review <PR_NUMBER>"
    echo ""
    echo "Extracts Sourcery review and saves to admin/feedback/sourcery/pr<NUMBER>.md"
    echo ""
    echo "Example:"
    echo "  dt-review 6"
    echo "  # Saves to admin/feedback/sourcery/pr06.md"
    echo ""
    echo "Use --help for more information"
    exit 1
fi

# Format PR number with leading zero if needed
PR_PADDED=$(printf "pr%02d" "$PR_NUMBER")

# Create output directory if it doesn't exist
mkdir -p admin/feedback/sourcery

# Output file
OUTPUT_FILE="admin/feedback/sourcery/${PR_PADDED}.md"

# Run the parser with rich details
echo "📋 Extracting Sourcery review for PR #${PR_NUMBER}..."
echo ""

if "$TOOLKIT_ROOT/bin/dt-sourcery-parse" "$PR_NUMBER" --rich-details --output "$OUTPUT_FILE"; then
    echo ""
    echo "✅ Review saved to: $OUTPUT_FILE"
    
    # Check if Overall Comments were found
    if grep -q "## Overall Comments" "$OUTPUT_FILE"; then
        echo ""
        echo "🎉 Overall Comments detected! This PR has high-level Sourcery feedback."
        echo ""
        echo "📋 Overall Comments preview:"
        echo "═══════════════════════════════════════════════════════════════"
        # Extract and display Overall Comments section
        awk '/## Overall Comments/,/^## [^O]/ { if (!/^## [^O]/ || /^## Overall Comments/) print }' "$OUTPUT_FILE" | head -20
        echo "═══════════════════════════════════════════════════════════════"
        echo ""
        echo "💡 This is a great test case for Overall Comments functionality!"
    else
        echo ""
        echo "ℹ️  No Overall Comments found in this PR (this is normal)"
    fi
    
    echo ""
    echo "💡 View the review:"
    echo "   cat $OUTPUT_FILE"
    echo "   code $OUTPUT_FILE"
else
    echo ""
    echo "❌ Failed to extract review"
    exit 1
fi
