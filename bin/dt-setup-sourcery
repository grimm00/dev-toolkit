#!/usr/bin/env bash

# Dev Toolkit - Sourcery Setup Script
# Interactive script to install and configure Sourcery AI for your repository

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

print_header() {
    echo ""
    echo -e "${BOLD}${CYAN}$1${NC}"
    echo -e "${CYAN}$(printf '═%.0s' $(seq 1 ${#1}))${NC}"
    echo ""
}

print_status() {
    local msg_type=$1
    local message=$2
    case $msg_type in
        "ERROR")   echo -e "${RED}❌ $message${NC}" ;;
        "WARNING") echo -e "${YELLOW}⚠️  $message${NC}" ;;
        "SUCCESS") echo -e "${GREEN}✅ $message${NC}" ;;
        "INFO")    echo -e "${BLUE}ℹ️  $message${NC}" ;;
    esac
}

print_header "🤖 Sourcery AI Setup for Dev Toolkit"

# Check if gh CLI is installed
if ! command -v gh >/dev/null 2>&1; then
    print_status "ERROR" "GitHub CLI (gh) is not installed"
    echo ""
    echo -e "${YELLOW}Install GitHub CLI:${NC}"
    echo "  macOS:   brew install gh"
    echo "  Linux:   See https://github.com/cli/cli/blob/trunk/docs/install_linux.md"
    echo "  Windows: See https://github.com/cli/cli#installation"
    exit 1
fi

print_status "SUCCESS" "GitHub CLI found: $(gh --version | head -1)"

# Check if authenticated (specifically for github.com)
echo ""
print_status "INFO" "Checking GitHub authentication..."
if ! gh auth status -h github.com >/dev/null 2>&1; then
    print_status "WARNING" "Not authenticated with github.com"
    echo ""
    echo -e "${CYAN}Let's authenticate with GitHub first...${NC}"
    echo ""
    gh auth login -h github.com
    echo ""
    print_status "SUCCESS" "Authenticated with GitHub"
else
    print_status "SUCCESS" "Already authenticated with github.com"
fi

# Check if we're in a git repository
echo ""
if ! git rev-parse --git-dir >/dev/null 2>&1; then
    print_status "ERROR" "Not in a git repository"
    echo ""
    echo -e "${YELLOW}💡 Run this command from within a git repository${NC}"
    exit 1
fi

# Get repository info
REPO=$(gh repo view --json nameWithOwner --jq '.nameWithOwner' 2>/dev/null || echo "")
if [ -z "$REPO" ]; then
    print_status "ERROR" "Cannot determine repository information"
    echo ""
    echo -e "${YELLOW}💡 Make sure you have a git remote configured${NC}"
    exit 1
fi

print_status "SUCCESS" "Repository detected: $REPO"

# Main menu
echo ""
print_header "What would you like to do?"
echo "1) Install Sourcery GitHub App"
echo "2) Check if Sourcery is installed"
echo "3) View Sourcery configuration docs"
echo "4) Test Sourcery on current PR"
echo "5) Exit"
echo ""
read -p "Enter your choice (1-5): " choice

case $choice in
    1)
        print_header "📦 Installing Sourcery GitHub App"
        echo -e "${CYAN}Opening Sourcery installation page in your browser...${NC}"
        echo ""
        echo -e "${YELLOW}Instructions:${NC}"
        echo "1. Click 'Install' or 'Configure'"
        echo "2. Select your account/organization"
        echo "3. Choose repositories:"
        echo "   - Select 'Only select repositories'"
        echo "   - Choose: $REPO"
        echo "4. Click 'Install & Authorize'"
        echo ""
        read -p "Press Enter to open browser..."
        
        # Open Sourcery installation page
        if command -v open >/dev/null 2>&1; then
            open "https://github.com/apps/sourcery-ai/installations/new"
        elif command -v xdg-open >/dev/null 2>&1; then
            xdg-open "https://github.com/apps/sourcery-ai/installations/new"
        else
            echo ""
            echo -e "${YELLOW}Please visit: https://github.com/apps/sourcery-ai/installations/new${NC}"
        fi
        
        echo ""
        read -p "Press Enter after you've installed Sourcery..."
        
        echo ""
        print_status "SUCCESS" "Installation page opened in browser"
        echo ""
        echo -e "${CYAN}After installing, you can verify with option 2${NC}"
        echo ""
        echo -e "${YELLOW}Note: It may take a minute for the installation to register${NC}"
        ;;
        
    2)
        print_header "🔍 Checking Sourcery Installation"
        
        # Check if there are any PRs to verify Sourcery on
        print_status "INFO" "Looking for Sourcery bot activity..."
        
        # Try to find Sourcery bot in recent PR reviews or comments
        SOURCERY_FOUND=false
        
        # Check recent PRs for Sourcery reviews
        PR_LIST=$(gh pr list --limit 10 --json number 2>/dev/null | jq -r '.[].number' 2>/dev/null)
        
        if [ -n "$PR_LIST" ]; then
            for pr in $PR_LIST; do
                if gh api "/repos/$REPO/pulls/$pr/reviews" --jq '.[] | select(.user.login == "sourcery-ai[bot]") | .user.login' 2>/dev/null | grep -q "sourcery-ai"; then
                    SOURCERY_FOUND=true
                    print_status "SUCCESS" "Sourcery is installed and active on $REPO"
                    echo ""
                    echo -e "${CYAN}Found Sourcery reviews on PR #$pr${NC}"
                    break
                fi
            done
        fi
        
        if [ "$SOURCERY_FOUND" = false ]; then
            # Check if Sourcery app is in the list of installed apps
            if gh api "/repos/$REPO/hooks" --jq '.[] | select(.config.url | contains("sourcery"))' 2>/dev/null | grep -q "sourcery"; then
                SOURCERY_FOUND=true
                print_status "SUCCESS" "Sourcery appears to be installed on $REPO"
            fi
        fi
        
        if [ "$SOURCERY_FOUND" = true ]; then
            echo ""
            echo -e "${CYAN}Sourcery is ready to use!${NC}"
            echo ""
            echo "Test it:"
            echo "1. Create a PR: gh pr create --title 'test' --body 'test'"
            echo "2. Wait 1-2 minutes for Sourcery to review"
            echo "3. Parse review: dt-sourcery-parse <PR_NUMBER>"
        else
            print_status "WARNING" "Cannot confirm Sourcery installation"
            echo ""
            echo -e "${YELLOW}This could mean:${NC}"
            echo "1. Sourcery is not installed yet"
            echo "2. No PRs have been created yet for Sourcery to review"
            echo "3. Sourcery hasn't reviewed any PRs yet"
            echo ""
            echo -e "${CYAN}To verify manually:${NC}"
            echo "1. Visit: https://github.com/$REPO/settings/installations"
            echo "2. Look for 'Sourcery' in the list"
            echo ""
            echo -e "${YELLOW}To install Sourcery:${NC}"
            echo "1. Run this script again and choose option 1"
            echo "2. Or visit: https://github.com/apps/sourcery-ai/installations/new"
        fi
        ;;
        
    3)
        print_header "📚 Sourcery Configuration"
        
        echo -e "${CYAN}Sourcery can be configured with a .sourcery.yaml file${NC}"
        echo ""
        echo "Example configuration:"
        echo ""
        cat << 'EOF'
# .sourcery.yaml
rules:
  - id: no-long-functions
    description: Functions should be less than 50 lines
    pattern: |
      def $FUNC(...):
        $$$BODY
    condition: len($$$BODY) > 50

python_version: "3.11"

github:
  request_review: author
  sourcery_branch: sourcery/main

thresholds:
  quality: 75
  complexity: 10
EOF
        echo ""
        echo -e "${CYAN}For more configuration options:${NC}"
        echo "https://docs.sourcery.ai/Configuration/"
        echo ""
        
        read -p "Create a basic .sourcery.yaml in this repo? (y/N): " create_config
        if [[ $create_config =~ ^[Yy]$ ]]; then
            cat > .sourcery.yaml << 'EOF'
# Sourcery AI Configuration
# See: https://docs.sourcery.ai/Configuration/

# Python version (if applicable)
# python_version: "3.11"

# GitHub integration
github:
  request_review: author
  sourcery_branch: sourcery/main

# Quality thresholds
thresholds:
  quality: 75
  complexity: 10

# Enable/disable specific rules
# rules:
#   - id: use-fstring-for-formatting
#     enabled: true
EOF
            print_status "SUCCESS" "Created .sourcery.yaml"
            echo ""
            echo -e "${YELLOW}Don't forget to commit it:${NC}"
            echo "  git add .sourcery.yaml"
            echo "  git commit -m 'config: Add Sourcery configuration'"
        fi
        ;;
        
    4)
        print_header "🧪 Testing Sourcery"
        
        # Check if there are any open PRs
        print_status "INFO" "Checking for open PRs..."
        PR_LIST=$(gh pr list --author "@me" --state open --json number,title --limit 5)
        PR_COUNT=$(echo "$PR_LIST" | jq length)
        
        if [ "$PR_COUNT" -eq 0 ]; then
            print_status "WARNING" "No open PRs found"
            echo ""
            echo -e "${CYAN}Let's create a test PR:${NC}"
            echo ""
            
            # Create test branch
            TEST_BRANCH="test/sourcery-$(date +%s)"
            git checkout -b "$TEST_BRANCH"
            
            # Create test file
            echo "# Sourcery Test" > SOURCERY_TEST.md
            echo "This is a test file to verify Sourcery integration." >> SOURCERY_TEST.md
            git add SOURCERY_TEST.md
            git commit -m "test: Verify Sourcery integration"
            git push -u origin "$TEST_BRANCH"
            
            # Create PR
            PR_URL=$(gh pr create --title "test: Verify Sourcery integration" --body "Testing Sourcery AI code review integration" --web)
            PR_NUMBER=$(gh pr view --json number --jq '.number')
            
            print_status "SUCCESS" "Test PR created: #$PR_NUMBER"
            echo ""
            echo -e "${CYAN}Waiting for Sourcery to review (this takes 1-2 minutes)...${NC}"
            echo ""
            
            for i in {1..12}; do
                echo -n "."
                sleep 10
            done
            echo ""
            echo ""
            
            print_status "INFO" "Checking for Sourcery review..."
            if dt-sourcery-parse "$PR_NUMBER" >/dev/null 2>&1; then
                print_status "SUCCESS" "Sourcery reviewed the PR!"
                echo ""
                echo "View the review:"
                echo "  dt-sourcery-parse $PR_NUMBER"
                echo ""
                echo "Or save to file:"
                echo "  dt-sourcery-parse $PR_NUMBER -o review.md"
            else
                print_status "WARNING" "No Sourcery review found yet"
                echo ""
                echo -e "${YELLOW}This could mean:${NC}"
                echo "1. Sourcery is still processing (wait a bit longer)"
                echo "2. Sourcery is not installed (run option 1)"
                echo "3. PR has no code changes to review"
                echo ""
                echo "Check manually:"
                echo "  gh pr view $PR_NUMBER"
            fi
        else
            echo -e "${CYAN}Found $PR_COUNT open PR(s):${NC}"
            echo "$PR_LIST" | jq -r '.[] | "#\(.number): \(.title)"'
            echo ""
            read -p "Enter PR number to check: " PR_NUMBER
            
            if [ -z "$PR_NUMBER" ]; then
                print_status "ERROR" "No PR number provided"
                exit 1
            fi
            
            print_status "INFO" "Checking PR #$PR_NUMBER for Sourcery review..."
            if dt-sourcery-parse "$PR_NUMBER"; then
                print_status "SUCCESS" "Sourcery review found and parsed!"
            else
                print_status "WARNING" "No Sourcery review found"
                echo ""
                echo -e "${YELLOW}Sourcery may not have reviewed yet${NC}"
                echo "Wait a minute and try: dt-sourcery-parse $PR_NUMBER"
            fi
        fi
        ;;
        
    5)
        print_status "INFO" "Exiting..."
        exit 0
        ;;
        
    *)
        print_status "ERROR" "Invalid choice"
        exit 1
        ;;
esac

echo ""
print_header "✨ Done!"
echo ""
echo -e "${CYAN}For more information:${NC}"
echo "  • Documentation: docs/SOURCERY-SETUP.md"
echo "  • Sourcery docs: https://docs.sourcery.ai/"
echo "  • Help: dt-sourcery-parse --help"
echo ""
