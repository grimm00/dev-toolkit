#!/usr/bin/env bash

# Pre-commit Git Hook for Git Flow Safety
# Automatically runs safety checks before commits
# Part of Dev Toolkit - portable, project-agnostic version

# Get the project root directory
PROJECT_ROOT=$(git rev-parse --show-toplevel)

# Detect toolkit installation
if [ -n "${DT_ROOT:-}" ]; then
    TOOLKIT_ROOT="$DT_ROOT"
elif [ -f "$HOME/.dev-toolkit/lib/git-flow/utils.sh" ]; then
    TOOLKIT_ROOT="$HOME/.dev-toolkit"
elif [ -f "$PROJECT_ROOT/.dev-toolkit/lib/git-flow/utils.sh" ]; then
    TOOLKIT_ROOT="$PROJECT_ROOT/.dev-toolkit"
else
    echo "⚠️  Dev toolkit not found, skipping safety checks..."
    exit 0
fi

# Source shared utilities if available
if [ -f "$TOOLKIT_ROOT/lib/git-flow/utils.sh" ]; then
    source "$TOOLKIT_ROOT/lib/git-flow/utils.sh"
    gf_init_git_flow_utils >/dev/null 2>&1
else
    # Fallback colors if utils not available
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    CYAN='\033[0;36m'
    NC='\033[0m'
    
    gf_print_status() {
        local msg_type=$1
        local message=$2
        case $msg_type in
            "ERROR")   echo -e "${RED}❌ $message${NC}" ;;
            "WARNING") echo -e "${YELLOW}⚠️  $message${NC}" ;;
            "SUCCESS") echo -e "${GREEN}✅ $message${NC}" ;;
            "INFO")    echo -e "${CYAN}ℹ️  $message${NC}" ;;
        esac
    }
fi

echo -e "${GF_CYAN}🛡️  Running pre-commit safety checks...${GF_NC}"

# Run basic safety checks (skip working directory check since we're committing)
if [ -f "$TOOLKIT_ROOT/lib/git-flow/safety.sh" ]; then
    # Run individual checks that make sense for pre-commit
    echo -e "${GF_CYAN}Checking branch safety...${GF_NC}"
    if ! "$TOOLKIT_ROOT/lib/git-flow/safety.sh" branch; then
        echo -e "${GF_RED}❌ Branch safety check failed${GF_NC}"
        echo -e "${GF_YELLOW}💡 Consider switching to a feature branch before committing${GF_NC}"
        exit 1
    fi
    
    echo -e "${GF_CYAN}Checking for potential conflicts...${GF_NC}"
    if ! "$TOOLKIT_ROOT/lib/git-flow/safety.sh" conflicts; then
        echo -e "${GF_RED}❌ Potential merge conflicts detected${GF_NC}"
        echo -e "${GF_YELLOW}💡 Resolve conflicts before committing${GF_NC}"
        exit 1
    fi
    
    echo -e "${GF_GREEN}✅ Pre-commit safety checks passed${GF_NC}"
else
    echo -e "${GF_YELLOW}⚠️  Safety check script not found, skipping...${GF_NC}"
fi

# Additional checks for specific file types
echo -e "${GF_CYAN}Checking for sensitive files...${GF_NC}"

# Check for accidentally committed sensitive files
if git diff --cached --name-only | grep -E "\.(env|key|pem|p12|pfx)$|\.env\.|secrets|password"; then
    echo -e "${GF_RED}❌ Potentially sensitive files detected in commit:${GF_NC}"
    git diff --cached --name-only | grep -E "\.(env|key|pem|p12|pfx)$|\.env\.|secrets|password"
    echo -e "${GF_YELLOW}💡 Remove sensitive files from commit or add to .gitignore${GF_NC}"
    exit 1
fi

# Check for large files (>10MB)
large_files=$(git diff --cached --name-only | xargs -I {} find {} -type f -size +10M 2>/dev/null)
if [ -n "$large_files" ]; then
    echo -e "${GF_RED}❌ Large files detected in commit (>10MB):${GF_NC}"
    echo "$large_files"
    echo -e "${GF_YELLOW}💡 Consider using Git LFS for large files${GF_NC}"
    exit 1
fi

echo -e "${GF_GREEN}🎉 All pre-commit checks passed!${GF_NC}"
exit 0
